import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.schedulers.Schedulers;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class RxJava3Demo {
    public static void main(String[] args) throws InterruptedException {
        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

        demo1_BasicOperations(numbers);

        demo2_AsyncProcessing(numbers);

        demo3_ParallelProcessing(numbers);

        demo4_CombiningStreams();

        demo5_PerformanceTest();
    }

    // 1. –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó
    private static void demo1_BasicOperations(List<Integer> numbers) {
        System.out.println("1. –ë–ê–ó–û–í–Ü –û–ü–ï–†–ê–¶–Ü–á –ó OBSERVABLE:");

        Observable.fromIterable(numbers)
                .filter(n -> {
                    System.out.println("–§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è: " + n + " –≤ –ø–æ—Ç–æ—Ü—ñ: " + Thread.currentThread().getName());
                    return n % 2 == 0;
                })
                .map(n -> {
                    System.out.println("–ö–≤–∞–¥—Ä–∞—Ç—É–≤–∞–Ω–Ω—è: " + n + " –≤ –ø–æ—Ç–æ—Ü—ñ: " + Thread.currentThread().getName());
                    return n * n;
                })
                .subscribe(
                        result -> System.out.println("–†–µ–∑—É–ª—å—Ç–∞—Ç: " + result),
                        error -> System.err.println("–ü–æ–º–∏–ª–∫–∞: " + error)
                );
    }

    // 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ –æ–±—Ä–æ–±–∫–∞
    private static void demo2_AsyncProcessing(List<Integer> numbers) {
        System.out.println("\n2. –ê–°–ò–ù–•–†–û–ù–ù–ê –û–ë–†–û–ë–ö–ê –ó SCHEDULERS:");

        Observable.fromIterable(numbers)
                .subscribeOn(Schedulers.computation())
                .filter(n -> {
                    System.out.println("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è: " + n + " –≤ –ø–æ—Ç–æ—Ü—ñ: " + Thread.currentThread().getName());
                    return n % 2 == 0;
                })
                .map(n -> {
                    System.out.println("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –∫–≤–∞–¥—Ä–∞—Ç—É–≤–∞–Ω–Ω—è: " + n + " –≤ –ø–æ—Ç–æ—Ü—ñ: " + Thread.currentThread().getName());
                    return n * n;
                })
                .observeOn(Schedulers.single())
                .subscribe(
                        result -> System.out.println("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " + result + " –≤ –ø–æ—Ç–æ—Ü—ñ: " + Thread.currentThread().getName()),
                        error -> System.err.println("–ü–æ–º–∏–ª–∫–∞: " + error)
                );
    }

    // 3. –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∑ flatMap
    private static void demo3_ParallelProcessing(List<Integer> numbers) {
        System.out.println("\n3. –ü–ê–†–ê–õ–ï–õ–¨–ù–ê –û–ë–†–û–ë–ö–ê –ó FLATMAP:");

        Observable.fromIterable(numbers)
                .flatMap(n -> Observable.just(n)
                        .subscribeOn(Schedulers.computation())
                        .map(x -> {
                            String threadName = Thread.currentThread().getName();
                            System.out.println("–ü–∞—Ä–∞–ª–µ–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ " + x + " –≤ –ø–æ—Ç–æ—Ü—ñ: " + threadName);
                            return x * x;
                        })
                )
                .toList()
                .subscribe(
                        results -> {
                            System.out.println("‚úÖ –í—Å—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏: " + results);
                            long sum = results.stream().mapToLong(Integer::longValue).sum();
                            System.out.println("–°—É–º–∞ –≤—Å—ñ—Ö –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤: " + sum);
                        },
                        error -> System.err.println("–ü–æ–º–∏–ª–∫–∞: " + error)
                );
    }

    // 4. –ö–æ–º–±—ñ–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—ñ–≤
    private static void demo4_CombiningStreams() {
        System.out.println("\n4. –ö–û–ú–ë–Ü–ù–£–í–ê–ù–ù–Ø –ü–û–¢–û–ö–Ü–í:");

        Observable<Integer> stream1 = Observable.just(1, 2, 3)
                .subscribeOn(Schedulers.computation())
                .map(n -> n * 10);

        Observable<Integer> stream2 = Observable.just(4, 5, 6)
                .subscribeOn(Schedulers.computation())
                .map(n -> n + 1);

        Observable.zip(stream1, stream2, (a, b) -> a + b)
                .subscribe(
                        result -> System.out.println("Zip —Ä–µ–∑—É–ª—å—Ç–∞—Ç: " + result),
                        error -> System.err.println("–ü–æ–º–∏–ª–∫–∞ zip: " + error)
                );

        // Merge - –æ–±'—î–¥–Ω—É—î –∫—ñ–ª—å–∫–∞ Observable
        Observable<String> fastStream = Observable.interval(100, TimeUnit.MILLISECONDS)
                .take(3)
                .map(i -> "Fast-" + i);

        Observable<String> slowStream = Observable.interval(300, TimeUnit.MILLISECONDS)
                .take(2)
                .map(i -> "Slow-" + i);

        Observable.merge(fastStream, slowStream)
                .subscribe(
                        result -> System.out.println("Merge: " + result),
                        error -> System.err.println("–ü–æ–º–∏–ª–∫–∞ merge: " + error),
                        () -> System.out.println("‚úÖ Merge –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                );
    }

    // 5. –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–í–ò–ü–†–ê–í–õ–ï–ù–ê –í–ï–†–°–Ü–Ø)
    private static void demo5_PerformanceTest() {
        System.out.println("\n5. –¢–ï–°–¢ –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü –ù–ê 50K –ï–õ–ï–ú–ï–ù–¢–Ü–í:");

        List<Integer> largeList = generateLargeList();

        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AtomicLong –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —á–∞—Å—É
        AtomicLong sequentialTime = new AtomicLong();
        AtomicLong parallelTime = new AtomicLong();

        long startSeq = System.currentTimeMillis();
        Observable.fromIterable(largeList)
                .filter(n -> n % 2 == 0)
                .map(n -> n * n)
                .reduce(0L, Long::sum)
                .subscribe(
                        result -> {
                            long endSeq = System.currentTimeMillis();
                            sequentialTime.set(endSeq - startSeq);
                            System.out.println("‚è±Ô∏è –ß–∞—Å –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏: " + sequentialTime.get() + " ms");
                            System.out.println("–°—É–º–∞ –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤ (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ): " + result);
                        },
                        error -> System.err.println("–ü–æ–º–∏–ª–∫–∞ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏: " + error)
                );


        long startPar = System.currentTimeMillis();
        Observable.fromIterable(largeList)
                .flatMap(n -> Observable.just(n)
                        .subscribeOn(Schedulers.computation())
                        .filter(x -> x % 2 == 0)
                        .map(x -> x * x)
                )
                .reduce(0L, Long::sum)
                .subscribe(
                        result -> {
                            long endPar = System.currentTimeMillis();
                            parallelTime.set(endPar - startPar);
                            System.out.println("‚è±Ô∏è –ß–∞—Å –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏: " + parallelTime.get() + " ms");
                            System.out.println("–°—É–º–∞ –∫–≤–∞–¥—Ä–∞—Ç—ñ–≤ (–ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ): " + result);

                            // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                            if (sequentialTime.get() > 0 && parallelTime.get() > 0) {
                                long diff = sequentialTime.get() - parallelTime.get();
                                System.out.println("üìä –†—ñ–∑–Ω–∏—Ü—è –≤ —á–∞—Å—ñ: " + Math.abs(diff) + " ms " +
                                        (diff > 0 ? "(–ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ —à–≤–∏–¥—à–µ –Ω–∞ " + diff + " ms)" :
                                                "(–ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ —à–≤–∏–¥—à–µ –Ω–∞ " + Math.abs(diff) + " ms)"));

                                double speedup = (double) sequentialTime.get() / parallelTime.get();
                                System.out.println("üöÄ –ü—Ä–∏—Ä—ñ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: " + String.format("%.2f", speedup) + "x");
                            }
                        },
                        error -> System.err.println("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏: " + error)
                );
    }


    private static List<Integer> generateLargeList() {
        return IntStream.rangeClosed(1, 50000)
                .boxed()
                .collect(Collectors.toList());
    }
}